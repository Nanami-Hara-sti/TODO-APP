version: '3.8'

services:
  devcontainer:
    build:
      context: .devcontainer
      dockerfile: Dockerfile
    volumes:
      - .:/workspaces/${localWorkspaceFolderBasename}
    command: sleep infinity
    # 開発環境コンテナも同じネットワークに参加させる
    networks:
      - app_network 
    # Dev Container 内から他のサービスにアクセスするために depends_on を含めることを推奨
    # これにより、他のサービスがDev Containerの起動前に立ち上がることを保証できる
    depends_on:
      - backend
      - frontend
      - db

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
    # command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload
    command: ["./wait-for-it.sh", "db:3306", "--", "uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8000", "--reload"]
    environment:
      # ホスト名は `db` サービス名を使用
      DATABASE_URL: mysql+pymysql://root:your_root_password@db:3306/todo_db
    depends_on:
      - db # backend は db に依存
    networks:
      - app_network # backend も同じネットワークに参加

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules # node_modules をホストと共有しないようにする (Docker Volumeで管理)
    command: npm start
    # frontend も同じネットワークに参加させる
    networks:
      - app_network
    # frontend が backend に依存する場合（API呼び出し前にbackendが起動していることを保証）
    depends_on:
      - backend 

  # db サービスは services ブロックの中に配置
  db:
    image: mysql:8.0
    environment:
      MYSQL_ROOT_PASSWORD: your_root_password
      MYSQL_DATABASE: todo_db
    ports:
      - "3306:3306"
    volumes:
      - db_data:/var/lib/mysql
    networks:
      - app_network # db も同じネットワークに参加

# networks と volumes は services と同じレベルに配置
networks:
  app_network:
    driver: bridge

volumes:
  db_data: